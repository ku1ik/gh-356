;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{js->clj}, :name asciinema.player.source, :imports nil, :requires {cljs.core.async cljs.core.async, http ajax.core, ajax.core ajax.core, vt asciinema.player.vt, asciinema.player.vt asciinema.player.vt, util asciinema.player.util, asciinema.player.util asciinema.player.util, asciinema.player.patch asciinema.player.patch}, :uses {js->clj asciinema.player.patch, timeout cljs.core.async, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, >! cljs.core.async, poll! cljs.core.async, put! cljs.core.async}, :defs {seek {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 15, :column 4, :end-line 15, :end-column 8, :protocol asciinema.player.source/Source, :doc "Jumps to the given time", :arglists (quote ([this time]))}, :protocol asciinema.player.source/Source, :name asciinema.player.source/seek, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 8, :method-params ([this time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this time])), :doc "Jumps to the given time"}, Source {:meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 10, :column 14, :end-line 10, :end-column 20, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {init [[this]], start [[this]], stop [[this]], toggle [[this]], seek [[this time]], change-speed [[this speed]]}}}, :protocol-symbol true, :name asciinema.player.source/Source, :file "src/asciinema/player/source.cljs", :end-column 20, :column 1, :line 10, :protocol-info {:methods {init [[this]], start [[this]], stop [[this]], toggle [[this]], seek [[this time]], change-speed [[this speed]]}}, :info nil, :end-line 10, :impls #{asciinema.player.source/StreamSource asciinema.player.source/RandomSource asciinema.player.source/PrerecordedSource}, :doc nil, :jsdoc ("@interface")}, time-frames {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 109, :column 7, :end-line 109, :end-column 18, :arglists (quote ([start-at elapsed-time])), :doc "Returns in infinite seq of time frames at given speed, starting from start-at\n  (in sec)."}, :name asciinema.player.source/time-frames, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 18, :method-params ([start-at elapsed-time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists (quote ([start-at elapsed-time])), :doc "Returns in infinite seq of time frames at given speed, starting from start-at\n  (in sec)."}, frames-at-speed {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 115, :column 7, :end-line 115, :end-column 22, :arglists (quote ([frames speed]))}, :name asciinema.player.source/frames-at-speed, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 22, :method-params ([frames speed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([frames speed]))}, make-source {:name asciinema.player.source/make-source, :file "src/asciinema/player/source.cljs", :line 18, :column 1, :end-line 18, :end-column 22, :doc "Returns a Source instance for given type and args.", :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 18, :column 11, :end-line 18, :end-column 22, :doc "Returns a Source instance for given type and args."}}, build-v1-frames {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 71, :column 7, :end-line 71, :end-column 22, :arglists (quote ([{:keys [stdout width height]}]))}, :name asciinema.player.source/build-v1-frames, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 22, :method-params ([p__29047]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [stdout width height]}]))}, show-loading {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 156, :column 7, :end-line 156, :end-column 19, :arglists (quote ([{:keys [events-ch recording-ch-fn]}])), :doc "Reports 'loading' to the player until the recording is loaded."}, :name asciinema.player.source/show-loading, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 19, :method-params ([p__29281]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [events-ch recording-ch-fn]}])), :doc "Reports 'loading' to the player until the recording is loaded."}, report-duration-and-size {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 147, :column 7, :end-line 147, :end-column 31, :arglists (quote ([{:keys [events-ch recording-ch-fn]}])), :doc "Waits for recording to load and then reports its size and duration to the\n  player."}, :name asciinema.player.source/report-duration-and-size, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 31, :method-params ([p__29136]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [events-ch recording-ch-fn]}])), :doc "Waits for recording to load and then reports its size and duration to the\n  player."}, map->StreamSource {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 378, :column 12, :end-line 378, :end-column 24, :internal-ctor true, :factory :map, :arglists (quote ([G__30946]))}, :name asciinema.player.source/map->StreamSource, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 24, :method-params ([G__30946]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 378, :end-line 378, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__30946]))}, map->RandomSource {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 318, :column 12, :end-line 318, :end-column 24, :internal-ctor true, :factory :map, :arglists (quote ([G__30688]))}, :name asciinema.player.source/map->RandomSource, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 24, :method-params ([G__30688]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 318, :end-line 318, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__30688]))}, vts! {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 299, :column 7, :end-line 299, :end-column 11, :arglists (quote ([width height events-ch]))}, :name asciinema.player.source/vts!, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 11, :method-params ([width height events-ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 299, :end-line 299, :max-fixed-arity 3, :fn-var true, :arglists (quote ([width height events-ch]))}, start-event-loop! {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 215, :column 7, :end-line 215, :end-column 24, :arglists (quote ([{:keys [events-ch recording-ch-fn start-at speed loop?], :as source}])), :doc "Main event loop of the PrerecordedSource."}, :name asciinema.player.source/start-event-loop!, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 24, :method-params ([p__29698]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 215, :end-line 215, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [events-ch recording-ch-fn start-at speed loop?], :as source}])), :doc "Main event loop of the PrerecordedSource."}, reduce-v0-frame {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 54, :column 7, :end-line 54, :end-column 22, :arglists (quote ([[_ acc] [delay diff]]))}, :name asciinema.player.source/reduce-v0-frame, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 22, :method-params ([p__29035 p__29036]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[_ acc] [delay diff]]))}, process-es-messages! {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 350, :column 7, :end-line 350, :end-column 27, :arglists (quote ([es-ch events-ch]))}, :name asciinema.player.source/process-es-messages!, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 27, :method-params ([es-ch events-ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 350, :end-line 350, :max-fixed-arity 2, :fn-var true, :arglists (quote ([es-ch events-ch]))}, es-message {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 347, :column 7, :end-line 347, :end-column 17, :arglists (quote ([payload]))}, :name asciinema.player.source/es-message, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 17, :method-params ([payload]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 347, :end-line 347, :max-fixed-arity 1, :fn-var true, :arglists (quote ([payload]))}, build-v0-frames {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 57, :column 7, :end-line 57, :end-column 22, :arglists (quote ([diffs]))}, :name asciinema.player.source/build-v0-frames, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 22, :method-params ([diffs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([diffs]))}, ->StreamSource {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 378, :column 12, :end-line 378, :end-column 24, :internal-ctor true, :factory :positional, :arglists (quote ([events-ch url auto-play? started?]))}, :name asciinema.player.source/->StreamSource, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 24, :method-params ([events-ch url auto-play? started?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 378, :end-line 378, :max-fixed-arity 4, :fn-var true, :arglists (quote ([events-ch url auto-play? started?]))}, init {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 11, :column 4, :end-line 11, :end-column 8, :protocol asciinema.player.source/Source, :doc "Initializes the source", :arglists (quote ([this]))}, :protocol asciinema.player.source/Source, :name asciinema.player.source/init, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 8, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Initializes the source"}, prerecorded-source {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 286, :column 7, :end-line 286, :end-column 25, :arglists (quote ([events-ch url initial-start-at initial-speed auto-play? loop? preload recording-fn]))}, :name asciinema.player.source/prerecorded-source, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 25, :method-params ([events-ch url initial-start-at initial-speed auto-play? loop? preload recording-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 286, :end-line 286, :max-fixed-arity 8, :fn-var true, :arglists (quote ([events-ch url initial-start-at initial-speed auto-play? loop? preload recording-fn]))}, make-recording-ch-fn {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 140, :column 7, :end-line 140, :end-column 27, :arglists (quote ([url recording-fn]))}, :name asciinema.player.source/make-recording-ch-fn, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 27, :method-params ([url recording-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists (quote ([url recording-fn]))}, fix-diffs {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 48, :column 7, :end-line 48, :end-column 16, :arglists (quote ([frames])), :doc "Converts integer keys referring to line numbers in line diff (which are\n  keywords) to actual integers."}, :name asciinema.player.source/fix-diffs, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 16, :method-params ([frames]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([frames])), :doc "Converts integer keys referring to line numbers in line diff (which are\n  keywords) to actual integers."}, map->PrerecordedSource {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 264, :column 12, :end-line 264, :end-column 29, :internal-ctor true, :factory :map, :arglists (quote ([G__30474]))}, :name asciinema.player.source/map->PrerecordedSource, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 29, :method-params ([G__30474]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 264, :end-line 264, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__30474]))}, emit-events {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 165, :column 7, :end-line 165, :end-column 18, :arglists (quote ([event-name coll f events-ch stop-ch])), :doc "Starts sending frames as events with a given name, stopping when stop-ch\n  closes."}, :name asciinema.player.source/emit-events, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 18, :method-params ([event-name coll f events-ch stop-ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 5, :fn-var true, :arglists (quote ([event-name coll f events-ch stop-ch])), :doc "Starts sending frames as events with a given name, stopping when stop-ch\n  closes."}, ->RandomSource {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 318, :column 12, :end-line 318, :end-column 24, :internal-ctor true, :factory :positional, :arglists (quote ([events-ch speed auto-play? width height stdout-ch stop-ch]))}, :name asciinema.player.source/->RandomSource, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 24, :method-params ([events-ch speed auto-play? width height stdout-ch stop-ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 318, :end-line 318, :max-fixed-arity 7, :fn-var true, :arglists (quote ([events-ch speed auto-play? width height stdout-ch stop-ch]))}, RandomSource {:num-fields 7, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection asciinema.player.source/Source cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name asciinema.player.source/RandomSource, :file "src/asciinema/player/source.cljs", :end-column 24, :type true, :column 12, :internal-ctor true, :line 318, :record true, :end-line 318, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, start {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 12, :column 4, :end-line 12, :end-column 9, :protocol asciinema.player.source/Source, :doc "Starts the playback", :arglists (quote ([this]))}, :protocol asciinema.player.source/Source, :name asciinema.player.source/start, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Starts the playback"}, PrerecordedSource {:num-fields 11, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection asciinema.player.source/Source cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name asciinema.player.source/PrerecordedSource, :file "src/asciinema/player/source.cljs", :end-column 29, :type true, :column 12, :internal-ctor true, :line 264, :record true, :end-line 264, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, lazy-promise-chan {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 118, :column 7, :end-line 118, :end-column 24, :arglists (quote ([f])), :doc "Returns a function f returning a promise channel. The calculation of the\n  promise value is triggered by calling f with truthy value."}, :name asciinema.player.source/lazy-promise-chan, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 24, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Returns a function f returning a promise channel. The calculation of the\n  promise value is triggered by calling f with truthy value."}, toggle {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 14, :column 4, :end-line 14, :end-column 10, :protocol asciinema.player.source/Source, :doc "Toggles the playback on/off", :arglists (quote ([this]))}, :protocol asciinema.player.source/Source, :name asciinema.player.source/toggle, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Toggles the playback on/off"}, ->PrerecordedSource {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 264, :column 12, :end-line 264, :end-column 29, :internal-ctor true, :factory :positional, :arglists (quote ([events-ch url start-at speed auto-play? loop? preload? recording-fn recording-ch-fn stop-ch command-ch]))}, :name asciinema.player.source/->PrerecordedSource, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 29, :method-params ([events-ch url start-at speed auto-play? loop? preload? recording-fn recording-ch-fn stop-ch command-ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 264, :end-line 264, :max-fixed-arity 11, :fn-var true, :arglists (quote ([events-ch url start-at speed auto-play? loop? preload? recording-fn recording-ch-fn stop-ch command-ch]))}, initialize-asciicast {:name asciinema.player.source/initialize-asciicast, :file "src/asciinema/player/source.cljs", :line 82, :column 1, :end-line 82, :end-column 31, :doc "Given fetched asciicast extracts width, height and frames into a map.", :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 82, :column 11, :end-line 82, :end-column 31, :doc "Given fetched asciicast extracts width, height and frames into a map."}}, play! {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 188, :column 7, :end-line 188, :end-column 12, :arglists (quote ([events-ch frames screen-fn duration stop-ch start-at speed loop?])), :doc "Starts emitting :time and :frame events with given start position and speed.\n  Stops when stop-ch closes. Returns a channel to which stop position is\n  eventually delivered."}, :name asciinema.player.source/play!, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 12, :method-params ([events-ch frames screen-fn duration stop-ch start-at speed loop?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 8, :fn-var true, :arglists (quote ([events-ch frames screen-fn duration stop-ch start-at speed loop?])), :doc "Starts emitting :time and :frame events with given start position and speed.\n  Stops when stop-ch closes. Returns a channel to which stop position is\n  eventually delivered."}, screen-state-at {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 24, :column 7, :end-line 24, :end-column 22, :arglists (quote ([screen-frames seconds])), :doc "Returns screen state (lines + cursor) at given time (in seconds)."}, :name asciinema.player.source/screen-state-at, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 22, :method-params ([screen-frames seconds]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([screen-frames seconds])), :doc "Returns screen state (lines + cursor) at given time (in seconds)."}, change-speed {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 16, :column 4, :end-line 16, :end-column 16, :protocol asciinema.player.source/Source, :doc "Changes playback speed (1.0 is normal speed)", :arglists (quote ([this speed]))}, :protocol asciinema.player.source/Source, :name asciinema.player.source/change-speed, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 16, :method-params ([this speed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this speed])), :doc "Changes playback speed (1.0 is normal speed)"}, stop {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 13, :column 4, :end-line 13, :end-column 8, :protocol asciinema.player.source/Source, :doc "Stops the playback", :arglists (quote ([this]))}, :protocol asciinema.player.source/Source, :name asciinema.player.source/stop, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 8, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Stops the playback"}, start-event-source! {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 360, :column 7, :end-line 360, :end-column 26, :arglists (quote ([url events-ch]))}, :name asciinema.player.source/start-event-source!, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 26, :method-params ([url events-ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 360, :end-line 360, :max-fixed-arity 2, :fn-var true, :arglists (quote ([url events-ch]))}, StreamSource {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection asciinema.player.source/Source cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name asciinema.player.source/StreamSource, :file "src/asciinema/player/source.cljs", :end-column 24, :type true, :column 12, :internal-ctor true, :line 378, :record true, :end-line 378, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, acc->screen {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 63, :column 7, :end-line 63, :end-column 18, :arglists (quote ([acc])), :doc "Extracts lines and cursor from pre v1 format frame."}, :name asciinema.player.source/acc->screen, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 18, :method-params ([acc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([acc])), :doc "Extracts lines and cursor from pre v1 format frame."}, start-random-stdout-gen! {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 308, :column 7, :end-line 308, :end-column 31, :arglists (quote ([events-ch stdout-ch speed stop-ch]))}, :name asciinema.player.source/start-random-stdout-gen!, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 31, :method-params ([events-ch stdout-ch speed stop-ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 308, :end-line 308, :max-fixed-arity 4, :fn-var true, :arglists (quote ([events-ch stdout-ch speed stop-ch]))}, fix-line-diff-keys {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 45, :column 8, :end-line 45, :end-column 26, :private true, :arglists (quote ([line-diff]))}, :private true, :name asciinema.player.source/fix-line-diff-keys, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 26, :method-params ([line-diff]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line-diff]))}, reduce-v1-frame {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 68, :column 7, :end-line 68, :end-column 22, :arglists (quote ([[_ vt] [delay str]]))}, :name asciinema.player.source/reduce-v1-frame, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 22, :method-params ([p__29041 p__29042]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[_ vt] [delay str]]))}, drop-frames {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 35, :column 7, :end-line 35, :end-column 18, :arglists (quote ([frames seconds])), :doc "Returns sequence of frames starting at given time (in seconds)."}, :name asciinema.player.source/drop-frames, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 18, :method-params ([frames seconds]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([frames seconds])), :doc "Returns sequence of frames starting at given time (in seconds)."}, vt->screen {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/src/asciinema/player/source.cljs", :line 75, :column 7, :end-line 75, :end-column 17, :arglists (quote ([{:keys [lines cursor]}])), :doc "Extracts lines and cursor from given vt, converting unicode codepoints to\n  strings."}, :name asciinema.player.source/vt->screen, :variadic false, :file "src/asciinema/player/source.cljs", :end-column 17, :method-params ([p__29052]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [lines cursor]}])), :doc "Extracts lines and cursor from given vt, converting unicode codepoints to\n  strings."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:y recording-fn :preload? :internal/rewind :screen height :asciicast :else :speed :start-at :raw :default preload? :events-ch :frames :screen-fn :time :response-format :recording-ch-fn :width :start :lines :cursor :recur :duration :command-ch :toggle speed :size :stop-ch start-at :error-handler :stream events-ch :change-speed recording-ch-fn :started? :stop width :loading :priority :auto-play? command-ch stop-ch :url :loop? :playing :random started? :stdout-ch :x auto-play? :seek :recording-fn :version :visible :hierarchy :handler :keywordize-keys loop? url :internal/seek :stdout :height stdout-ch}, :order [:hierarchy :default :lines :cursor :x :y :visible :stdout :width :height :version :screen-fn :duration :frames :recur :else :response-format :handler :error-handler :raw :events-ch :recording-ch-fn :size :loading :priority :playing :screen :time :start-at :speed :loop? :start :internal/seek :change-speed :seek :stop :internal/rewind :toggle :url :auto-play? :preload? :recording-fn :stop-ch :command-ch events-ch url start-at speed auto-play? loop? preload? recording-fn recording-ch-fn stop-ch command-ch :asciicast :keywordize-keys :stdout-ch width height stdout-ch :random :started? started? :stream]}, :doc nil}