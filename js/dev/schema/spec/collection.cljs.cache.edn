;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name schema.spec.collection, :imports nil, :requires {utils schema.utils, schema.utils schema.utils, spec schema.spec.core, schema.spec.core schema.spec.core}, :uses nil, :defs {sequence-transformer {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/spec/collection.cljs", :line 40, :column 8, :end-line 40, :end-column 28, :private true, :arglists (quote ([elts params then]))}, :private true, :name schema.spec.collection/sequence-transformer, :variadic false, :file "resources/public/js/dev/schema/spec/collection.cljs", :end-column 28, :method-params ([elts params then]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 3, :fn-var true, :arglists (quote ([elts params then]))}, optional-tail {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/spec/collection.cljs", :line 139, :column 7, :end-line 139, :end-column 20, :arglists (quote ([schema parser more]))}, :name schema.spec.collection/optional-tail, :variadic false, :file "resources/public/js/dev/schema/spec/collection.cljs", :end-column 20, :method-params ([schema parser more]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 3, :fn-var true, :arglists (quote ([schema parser more]))}, ->CollectionSpec {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/spec/collection.cljs", :line 70, :column 12, :end-line 70, :end-column 26, :internal-ctor true, :factory :positional, :arglists (quote ([pre constructor elements on-error]))}, :name schema.spec.collection/->CollectionSpec, :variadic false, :file "resources/public/js/dev/schema/spec/collection.cljs", :end-column 26, :method-params ([pre constructor elements on-error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 70, :end-line 70, :max-fixed-arity 4, :fn-var true, :arglists (quote ([pre constructor elements on-error]))}, map->CollectionSpec {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/spec/collection.cljs", :line 70, :column 12, :end-line 70, :end-column 26, :internal-ctor true, :factory :map, :arglists (quote ([G__23693]))}, :name schema.spec.collection/map->CollectionSpec, :variadic false, :file "resources/public/js/dev/schema/spec/collection.cljs", :end-column 26, :method-params ([G__23693]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23693]))}, remaining {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/spec/collection.cljs", :line 118, :column 7, :end-line 118, :end-column 16, :arglists (quote ([s])), :doc "All remaining elements must match schema s"}, :name schema.spec.collection/remaining, :variadic false, :file "resources/public/js/dev/schema/spec/collection.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "All remaining elements must match schema s"}, has-error? {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/spec/collection.cljs", :line 60, :column 8, :end-line 60, :end-column 18, :private true, :arglists (quote ([l]))}, :private true, :name schema.spec.collection/has-error?, :variadic false, :file "resources/public/js/dev/schema/spec/collection.cljs", :end-column 18, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}, element-transformer {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/spec/collection.cljs", :line 16, :column 8, :end-line 16, :end-column 27, :private true, :arglists (quote ([e params then]))}, :private true, :name schema.spec.collection/element-transformer, :variadic false, :file "resources/public/js/dev/schema/spec/collection.cljs", :end-column 27, :method-params ([e params then]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 3, :fn-var true, :arglists (quote ([e params then]))}, CollectionSpec {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted schema.spec.core/CoreSpec cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.spec.collection/CollectionSpec, :file "resources/public/js/dev/schema/spec/collection.cljs", :end-column 26, :type true, :column 12, :internal-ctor true, :line 70, :record true, :end-line 70, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, one-element {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/spec/collection.cljs", :line 133, :column 7, :end-line 133, :end-column 18, :arglists (quote ([required? schema parser]))}, :name schema.spec.collection/one-element, :variadic false, :file "resources/public/js/dev/schema/spec/collection.cljs", :end-column 18, :method-params ([required? schema parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 3, :fn-var true, :arglists (quote ([required? schema parser]))}, optional {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/spec/collection.cljs", :line 123, :column 7, :end-line 123, :end-column 15, :arglists (quote ([& ss])), :doc "If any more elements are present, they must match the elements in 'ss'", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ss)], :arglists ([& ss]), :arglists-meta (nil)}}, :name schema.spec.collection/optional, :variadic true, :file "resources/public/js/dev/schema/spec/collection.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ss)], :arglists ([& ss]), :arglists-meta (nil)}, :method-params [(ss)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 0, :fn-var true, :arglists ([& ss]), :doc "If any more elements are present, they must match the elements in 'ss'"}, subschemas {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/spec/collection.cljs", :line 63, :column 7, :end-line 63, :end-column 17, :arglists (quote ([elt]))}, :name schema.spec.collection/subschemas, :variadic false, :file "resources/public/js/dev/schema/spec/collection.cljs", :end-column 17, :method-params ([elt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elt]))}, all-elements {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/spec/collection.cljs", :line 128, :column 7, :end-line 128, :end-column 19, :arglists (quote ([schema]))}, :name schema.spec.collection/all-elements, :variadic false, :file "resources/public/js/dev/schema/spec/collection.cljs", :end-column 19, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema]))}, collection-spec {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/spec/collection.cljs", :line 86, :column 7, :end-line 86, :end-column 22, :arglists (quote ([pre constructor elements on-error])), :doc "A collection represents a collection of elements, each of which is itself\n   schematized.  At the top level, the collection has a precondition\n   (presumably on the overall type), a constructor for the collection from a\n   sequence of items, an element spec, and a function that constructs a\n   descriptive error on failure.\n\n   The element spec is a nested list structure, in which the leaf elements each\n   provide an element schema, parser (allowing for efficient processing of structured\n   collections), and optional error wrapper.  Each item in the list can be a leaf\n   element or an `optional` nested element spec (see below).  In addition, the final\n   element can be a `remaining` schema (see below).\n\n   Note that the `optional` carries no semantics with respect to validation;\n   the user must ensure that the parser enforces the desired semantics, which\n   should match the structure of the spec for proper generation."}, :name schema.spec.collection/collection-spec, :variadic false, :file "resources/public/js/dev/schema/spec/collection.cljs", :end-column 22, :method-params ([pre constructor elements on-error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 4, :fn-var true, :arglists (quote ([pre constructor elements on-error])), :doc "A collection represents a collection of elements, each of which is itself\n   schematized.  At the top level, the collection has a precondition\n   (presumably on the overall type), a constructor for the collection from a\n   sequence of items, an element spec, and a function that constructs a\n   descriptive error on failure.\n\n   The element spec is a nested list structure, in which the leaf elements each\n   provide an element schema, parser (allowing for efficient processing of structured\n   collections), and optional error wrapper.  Each item in the list can be a leaf\n   element or an `optional` nested element spec (see below).  In addition, the final\n   element can be a `remaining` schema (see below).\n\n   Note that the `optional` carries no semantics with respect to validation;\n   the user must ensure that the parser enforces the desired semantics, which\n   should match the structure of the spec for proper generation."}}, :require-macros {macros schema.macros, schema.macros schema.macros, utils schema.utils, schema.utils schema.utils}, :cljs.analyzer/constants {:seen #{:schema on-error first :return-walked? vector? :schema.spec.collection/remaining :pre elt pre :elements :schema.spec.collection/optional :parser :constructor elements :on-error constructor}, :order [:parser :schema.spec.collection/remaining :schema vector? elt :schema.spec.collection/optional first :return-walked? :pre :constructor :elements :on-error pre constructor elements on-error]}, :doc "A collection spec represents a collection of elements,\n   each of which is itself schematized."}