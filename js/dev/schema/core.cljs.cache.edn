;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{atom Symbol fn defn defmethod letfn Keyword defrecord}, :name schema.core, :imports nil, :requires {collection schema.spec.collection, schema.spec.collection schema.spec.collection, schema.spec.core schema.spec.core, variant schema.spec.variant, leaf schema.spec.leaf, schema.spec.variant schema.spec.variant, schema.spec.leaf schema.spec.leaf, spec schema.spec.core, str clojure.string, utils schema.utils, clojure.string clojure.string, schema.utils schema.utils}, :uses nil, :defs {map->Queue {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 876, :column 25, :end-line 876, :end-column 30, :internal-ctor true, :factory :map, :arglists (quote ([G__24059]))}, :name schema.core/map->Queue, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 30, :method-params ([G__24059]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 876, :end-line 876, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24059]))}, ->Predicate {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 295, :column 25, :end-line 295, :end-column 34, :internal-ctor true, :factory :positional, :arglists (quote ([p? pred-name]))}, :name schema.core/->Predicate, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 34, :method-params ([p? pred-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 295, :end-line 295, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p? pred-name]))}, ConditionalSchema {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/ConditionalSchema, :file "resources/public/js/dev/schema/core.cljs", :end-column 42, :type true, :column 25, :internal-ctor true, :line 473, :record true, :end-line 473, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, arity {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 1050, :column 21, :end-line 1050, :end-column 26, :private true, :arglists (quote ([input-schema]))}, :private true, :name schema.core/arity, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 26, :method-params ([input-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1050, :end-line 1050, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-schema]))}, map->FnSchema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 1042, :column 25, :end-line 1042, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__24105]))}, :name schema.core/map->FnSchema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :method-params ([G__24105]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 1042, :end-line 1042, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24105]))}, map-error {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 816, :column 8, :end-line 816, :end-column 17, :private true, :arglists (quote ([]))}, :private true, :name schema.core/map-error, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 816, :end-line 816, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ->One {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 901, :column 25, :end-line 901, :end-column 28, :internal-ctor true, :factory :positional, :arglists (quote ([schema optional? name]))}, :name schema.core/->One, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 28, :method-params ([schema optional? name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 901, :end-line 901, :max-fixed-arity 3, :fn-var true, :arglists (quote ([schema optional? name]))}, named {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 438, :column 20, :end-line 438, :end-column 25, :arglists (quote ([schema name])), :doc "A value that must satisfy schema, and has a name for documentation purposes."}, :name schema.core/named, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 25, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 438, :end-line 438, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "A value that must satisfy schema, and has a name for documentation purposes."}, optional-key {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 731, :column 20, :end-line 731, :end-column 32, :arglists (quote ([k])), :doc "An optional key in a map"}, :name schema.core/optional-key, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 32, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 731, :end-line 731, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "An optional key in a map"}, instance-precondition {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 172, :column 20, :end-line 172, :end-column 41, :arglists (quote ([s klass]))}, :name schema.core/instance-precondition, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 41, :method-params ([s klass]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s klass]))}, Protocol {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Protocol, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 322, :record true, :end-line 322, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Atomic {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 677, :column 25, :end-line 677, :end-column 31, :internal-ctor true, :factory :map, :arglists (quote ([G__23969]))}, :name schema.core/map->Atomic, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 31, :method-params ([G__23969]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 677, :end-line 677, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23969]))}, map->AnythingSchema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 239, :column 25, :end-line 239, :end-column 39, :internal-ctor true, :factory :map, :arglists (quote ([G__23743]))}, :name schema.core/map->AnythingSchema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 39, :method-params ([G__23743]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 239, :end-line 239, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23743]))}, map-explain {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 827, :column 21, :end-line 827, :end-column 32, :private true, :arglists (quote ([this]))}, :private true, :name schema.core/map-explain, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 32, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 827, :end-line 827, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, atom {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 687, :column 20, :end-line 687, :end-column 24, :arglists (quote ([schema])), :doc "An atom containing a value matching 'schema'."}, :name schema.core/atom, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 24, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 687, :end-line 687, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "An atom containing a value matching 'schema'."}, Maybe {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Maybe, :file "resources/public/js/dev/schema/core.cljs", :end-column 30, :type true, :column 25, :internal-ctor true, :line 413, :record true, :end-line 413, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, MapEntry {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/MapEntry, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 751, :record true, :end-line 751, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, One {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/One, :file "resources/public/js/dev/schema/core.cljs", :end-column 28, :type true, :column 25, :internal-ctor true, :line 901, :record true, :end-line 901, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Isa {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 267, :column 25, :end-line 267, :end-column 28, :internal-ctor true, :factory :positional, :arglists (quote ([h parent]))}, :name schema.core/->Isa, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 28, :method-params ([h parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 267, :end-line 267, :max-fixed-arity 2, :fn-var true, :arglists (quote ([h parent]))}, map->ConditionalSchema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 473, :column 25, :end-line 473, :end-column 42, :internal-ctor true, :factory :map, :arglists (quote ([G__23861]))}, :name schema.core/map->ConditionalSchema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 42, :method-params ([G__23861]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 473, :end-line 473, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23861]))}, NamedSchema {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/NamedSchema, :file "resources/public/js/dev/schema/core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 430, :record true, :end-line 430, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->MapEntry {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 751, :column 25, :end-line 751, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__23993]))}, :name schema.core/map->MapEntry, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :method-params ([G__23993]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 751, :end-line 751, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23993]))}, required-key? {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 725, :column 20, :end-line 725, :end-column 33, :arglists (quote ([ks]))}, :name schema.core/required-key?, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 725, :end-line 725, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, ->Both {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 603, :column 25, :end-line 603, :end-column 29, :internal-ctor true, :factory :positional, :arglists (quote ([schemas]))}, :name schema.core/->Both, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 29, :method-params ([schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 603, :end-line 603, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schemas]))}, schema-with-name {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 1089, :column 20, :end-line 1089, :end-column 36, :arglists (quote ([schema name])), :doc "Records name in schema's metadata."}, :name schema.core/schema-with-name, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 36, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1089, :end-line 1089, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "Records name in schema's metadata."}, atom? {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 673, :column 8, :end-line 673, :end-column 13, :private true, :arglists (quote ([x]))}, :private true, :name schema.core/atom?, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 673, :end-line 673, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, Symbol {:name schema.core/Symbol, :file "resources/public/js/dev/schema/core.cljs", :line 385, :column 1, :end-line 385, :end-column 12, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 385, :column 6, :end-line 385, :end-column 12}, :doc "A symbol"}, ->Constrained {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 579, :column 25, :end-line 579, :end-column 36, :internal-ctor true, :factory :positional, :arglists (quote ([schema postcondition post-name]))}, :name schema.core/->Constrained, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 36, :method-params ([schema postcondition post-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 579, :end-line 579, :max-fixed-arity 3, :fn-var true, :arglists (quote ([schema postcondition post-name]))}, Either {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Either, :file "resources/public/js/dev/schema/core.cljs", :end-column 31, :type true, :column 25, :internal-ctor true, :line 446, :record true, :end-line 446, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->One {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 901, :column 25, :end-line 901, :end-column 28, :internal-ctor true, :factory :map, :arglists (quote ([G__24067]))}, :name schema.core/map->One, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 28, :method-params ([G__24067]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 901, :end-line 901, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24067]))}, fn-schema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 1212, :column 30, :end-line 1212, :end-column 39, :tag FnSchema, :arglists (quote ([f])), :doc "Produce the schema for a function defined with s/fn or s/defn."}, :name schema.core/fn-schema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 39, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1212, :ret-tag FnSchema, :end-line 1212, :max-fixed-arity 1, :tag FnSchema, :fn-var true, :arglists (quote ([f])), :doc "Produce the schema for a function defined with s/fn or s/defn."}, conditional {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 492, :column 20, :end-line 492, :end-column 31, :arglists (quote ([& preds-and-schemas])), :doc "Define a conditional schema.  Takes args like cond,\n   (conditional pred1 schema1 pred2 schema2 ...),\n   and checks the first schemaX where predX (an ordinary Clojure function\n   that returns true or false) returns true on the value.\n   Unlike cond, throws if the value does not match any condition.\n   :else may be used as a final condition in the place of (constantly true).\n   More efficient than either, since only one schema must be checked.\n   An optional final argument can be passed, a symbol to appear in\n   error messages when none of the conditions match.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(preds-and-schemas)], :arglists ([& preds-and-schemas]), :arglists-meta (nil)}}, :name schema.core/conditional, :variadic true, :file "resources/public/js/dev/schema/core.cljs", :end-column 31, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(preds-and-schemas)], :arglists ([& preds-and-schemas]), :arglists-meta (nil)}, :method-params [(preds-and-schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 492, :end-line 492, :max-fixed-arity 0, :fn-var true, :arglists ([& preds-and-schemas]), :doc "Define a conditional schema.  Takes args like cond,\n   (conditional pred1 schema1 pred2 schema2 ...),\n   and checks the first schemaX where predX (an ordinary Clojure function\n   that returns true or false) returns true on the value.\n   Unlike cond, throws if the value does not match any condition.\n   :else may be used as a final condition in the place of (constantly true).\n   More efficient than either, since only one schema must be checked.\n   An optional final argument can be passed, a symbol to appear in\n   error messages when none of the conditions match."}, precondition {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 520, :column 4, :end-line 520, :end-column 16, :protocol schema.core/HasPrecondition, :doc "Return a predicate representing the Precondition for this schema:\n     the predicate returns true if the precondition is satisfied.\n     (See spec.core for more details)", :arglists (quote ([this]))}, :protocol schema.core/HasPrecondition, :name schema.core/precondition, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 519, :end-line 520, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return a predicate representing the Precondition for this schema:\n     the predicate returns true if the precondition is satisfied.\n     (See spec.core for more details)"}, either {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 457, :column 43, :end-line 457, :end-column 49, :deprecated "1.0.0", :arglists (quote ([& schemas])), :doc "A value that must satisfy at least one schema in schemas.\n   Note that `either` does not work properly with coercion\n\n   DEPRECATED: prefer `conditional` or `cond-pre`\n\n   WARNING: either does not work with coercion.  It is also slow and gives\n   bad error messages.  Please consider using `conditional` and friends\n   instead; they are more efficient, provide better error messages,\n   and work with coercion.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}}, :name schema.core/either, :variadic true, :file "resources/public/js/dev/schema/core.cljs", :end-column 49, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}, :method-params [(schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 457, :deprecated "1.0.0", :end-line 457, :max-fixed-arity 0, :fn-var true, :arglists ([& schemas]), :doc "A value that must satisfy at least one schema in schemas.\n   Note that `either` does not work properly with coercion\n\n   DEPRECATED: prefer `conditional` or `cond-pre`\n\n   WARNING: either does not work with coercion.  It is also slow and gives\n   bad error messages.  Please consider using `conditional` and friends\n   instead; they are more efficient, provide better error messages,\n   and work with coercion."}, explicit-schema-key {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 740, :column 20, :end-line 740, :end-column 39, :arglists (quote ([ks]))}, :name schema.core/explicit-schema-key, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 39, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 740, :end-line 740, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, schema-name {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 1094, :column 20, :end-line 1094, :end-column 31, :arglists (quote ([schema])), :doc "Returns the name of a schema attached via schema-with-name (or defschema)."}, :name schema.core/schema-name, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 31, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1094, :end-line 1094, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Returns the name of a schema attached via schema-with-name (or defschema)."}, Bool {:name schema.core/Bool, :file "resources/public/js/dev/schema/core.cljs", :line 369, :column 1, :end-line 369, :end-column 10, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 369, :column 6, :end-line 369, :end-column 10}, :doc "Boolean true or false"}, ->EqSchema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 254, :column 25, :end-line 254, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([v]))}, :name schema.core/->EqSchema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, enum {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 287, :column 20, :end-line 287, :end-column 24, :arglists (quote ([& vs])), :doc "A value that must be = to some element of vs.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(vs)], :arglists ([& vs]), :arglists-meta (nil)}}, :name schema.core/enum, :variadic true, :file "resources/public/js/dev/schema/core.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(vs)], :arglists ([& vs]), :arglists-meta (nil)}, :method-params [(vs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 0, :fn-var true, :arglists ([& vs]), :doc "A value that must be = to some element of vs."}, one {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 903, :column 20, :end-line 903, :end-column 23, :arglists (quote ([schema name])), :doc "A single required element of a sequence (not repeated, the implicit default)"}, :name schema.core/one, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 23, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 903, :end-line 903, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "A single required element of a sequence (not repeated, the implicit default)"}, find-extra-keys-schema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 772, :column 20, :end-line 772, :end-column 42, :arglists (quote ([map-schema]))}, :name schema.core/find-extra-keys-schema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 42, :method-params ([map-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 772, :end-line 772, :max-fixed-arity 1, :fn-var true, :arglists (quote ([map-schema]))}, ->t_schema$core23820 {:protocol-inline nil, :meta {:anonymous true, :protocols #{schema.core/Schema cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([meta23821])), :file nil}, :protocols #{schema.core/Schema cljs.core/IMeta cljs.core/IWithMeta}, :name schema.core/->t_schema$core23820, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :method-params ([meta23821]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 10, :factory :positional, :line 392, :max-fixed-arity 1, :fn-var true, :arglists (quote ([meta23821])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, map->Predicate {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 295, :column 25, :end-line 295, :end-column 34, :internal-ctor true, :factory :map, :arglists (quote ([G__23793]))}, :name schema.core/map->Predicate, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 34, :method-params ([G__23793]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 295, :end-line 295, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23793]))}, t_schema$core23820 {:num-fields 1, :protocols #{schema.core/Schema cljs.core/IMeta cljs.core/IWithMeta}, :name schema.core/t_schema$core23820, :file "resources/public/js/dev/schema/core.cljs", :type true, :anonymous true, :column 10, :line 392, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, map->RequiredKey {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 716, :column 25, :end-line 716, :end-column 36, :internal-ctor true, :factory :map, :arglists (quote ([G__23977]))}, :name schema.core/map->RequiredKey, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 36, :method-params ([G__23977]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 716, :end-line 716, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23977]))}, Record {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Record, :file "resources/public/js/dev/schema/core.cljs", :end-column 31, :type true, :column 25, :internal-ctor true, :line 992, :record true, :end-line 992, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, parse-sequence-schema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 913, :column 20, :end-line 913, :end-column 41, :arglists (quote ([s]))}, :name schema.core/parse-sequence-schema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 41, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 913, :end-line 913, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, OptionalKey {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/OptionalKey, :file "resources/public/js/dev/schema/core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 729, :record true, :end-line 729, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Record {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 992, :column 25, :end-line 992, :end-column 31, :internal-ctor true, :factory :map, :arglists (quote ([G__24093]))}, :name schema.core/map->Record, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 31, :method-params ([G__24093]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 992, :end-line 992, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24093]))}, EqSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/EqSchema, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 254, :record true, :end-line 254, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, explain {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 114, :column 4, :end-line 114, :end-column 11, :protocol schema.core/Schema, :doc "Expand this schema to a human-readable format suitable for pprinting,\n     also expanding class schematas at the leaves.  Example:\n\n     user> (s/explain {:a s/Keyword :b [s/Int]} )\n     {:a Keyword, :b [Int]}", :arglists (quote ([this]))}, :protocol schema.core/Schema, :name schema.core/explain, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Expand this schema to a human-readable format suitable for pprinting,\n     also expanding class schematas at the leaves.  Example:\n\n     user> (s/explain {:a s/Keyword :b [s/Int]} )\n     {:a Keyword, :b [Int]}"}, map-spec {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 820, :column 8, :end-line 820, :end-column 16, :private true, :arglists (quote ([this]))}, :private true, :name schema.core/map-spec, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 820, :end-line 820, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, ->RequiredKey {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 716, :column 25, :end-line 716, :end-column 36, :internal-ctor true, :factory :positional, :arglists (quote ([k]))}, :name schema.core/->RequiredKey, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 36, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 716, :end-line 716, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, CondPre {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/CondPre, :file "resources/public/js/dev/schema/core.cljs", :end-column 32, :type true, :column 25, :internal-ctor true, :line 544, :record true, :end-line 544, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Protocol {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 322, :column 25, :end-line 322, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__23810]))}, :name schema.core/map->Protocol, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :method-params ([G__23810]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 322, :end-line 322, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23810]))}, set-max-value-length! {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 1383, :column 20, :end-line 1383, :end-column 41, :arglists (quote ([max-length])), :doc "Sets the maximum length of value to be output before it is contracted to a prettier name."}, :name schema.core/set-max-value-length!, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 41, :method-params ([max-length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1383, :end-line 1383, :max-fixed-arity 1, :fn-var true, :arglists (quote ([max-length])), :doc "Sets the maximum length of value to be output before it is contracted to a prettier name."}, map->Recursive {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 647, :column 25, :end-line 647, :end-column 34, :internal-ctor true, :factory :map, :arglists (quote ([G__23957]))}, :name schema.core/map->Recursive, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 34, :method-params ([G__23957]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 647, :end-line 647, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23957]))}, Constrained {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Constrained, :file "resources/public/js/dev/schema/core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 579, :record true, :end-line 579, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, fn-validation? {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 1171, :column 20, :end-line 1171, :end-column 34, :arglists (quote ([])), :doc "Get the current global schema validation setting."}, :name schema.core/fn-validation?, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 34, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1171, :end-line 1171, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Get the current global schema validation setting."}, isa {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 272, :column 20, :end-line 272, :end-column 23, :arglists (quote ([parent] [h parent])), :doc "A value that must be a child of parent.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([parent] [h parent]), :arglists ([parent] [h parent]), :arglists-meta (nil nil)}}, :name schema.core/isa, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([parent] [h parent]), :arglists ([parent] [h parent]), :arglists-meta (nil nil)}, :method-params ([parent] [h parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 2, :fn-var true, :arglists ([parent] [h parent]), :doc "A value that must be a child of parent."}, Num {:name schema.core/Num, :file "resources/public/js/dev/schema/core.cljs", :line 373, :column 1, :end-line 373, :end-column 9, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 373, :column 6, :end-line 373, :end-column 9}, :doc "Any number"}, eq {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 259, :column 20, :end-line 259, :end-column 22, :arglists (quote ([v])), :doc "A value that must be (= v)."}, :name schema.core/eq, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 22, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "A value that must be (= v)."}, validate {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 159, :column 20, :end-line 159, :end-column 28, :arglists (quote ([schema value])), :doc "Throw an exception if value does not satisfy schema; otherwise, return value.\n   If you will be validating many datums, it is much more efficient to create\n   a 'validator' once and call it on each of them."}, :name schema.core/validate, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 28, :method-params ([schema value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema value])), :doc "Throw an exception if value does not satisfy schema; otherwise, return value.\n   If you will be validating many datums, it is much more efficient to create\n   a 'validator' once and call it on each of them."}, ->Atomic {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 677, :column 25, :end-line 677, :end-column 31, :internal-ctor true, :factory :positional, :arglists (quote ([schema]))}, :name schema.core/->Atomic, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 31, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 677, :end-line 677, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema]))}, pred {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 305, :column 20, :end-line 305, :end-column 24, :arglists (quote ([p?] [p? pred-name])), :doc "A value for which p? returns true (and does not throw).\n   Optional pred-name can be passed for nicer validation errors.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p?] [p? pred-name]), :arglists ([p?] [p? pred-name]), :arglists-meta (nil nil)}}, :name schema.core/pred, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p?] [p? pred-name]), :arglists ([p?] [p? pred-name]), :arglists-meta (nil nil)}, :method-params ([p?] [p? pred-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 305, :end-line 305, :max-fixed-arity 2, :fn-var true, :arglists ([p?] [p? pred-name]), :doc "A value for which p? returns true (and does not throw).\n   Optional pred-name can be passed for nicer validation errors."}, AnythingSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/AnythingSchema, :file "resources/public/js/dev/schema/core.cljs", :end-column 39, :type true, :column 25, :internal-ctor true, :line 239, :record true, :end-line 239, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, Any {:name schema.core/Any, :file "resources/public/js/dev/schema/core.cljs", :line 247, :column 1, :end-line 247, :end-column 9, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 247, :column 6, :end-line 247, :end-column 9}, :doc "Any value, including nil."}, ->CondPre {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 544, :column 25, :end-line 544, :end-column 32, :internal-ctor true, :factory :positional, :arglists (quote ([schemas]))}, :name schema.core/->CondPre, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 32, :method-params ([schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 544, :end-line 544, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schemas]))}, Regex {:name schema.core/Regex, :file "resources/public/js/dev/schema/core.cljs", :line 389, :column 1, :end-line 389, :end-column 11, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 389, :column 6, :end-line 389, :end-column 11}, :doc "A regular expression"}, ->EnumSchema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 282, :column 25, :end-line 282, :end-column 35, :internal-ctor true, :factory :positional, :arglists (quote ([vs]))}, :name schema.core/->EnumSchema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 35, :method-params ([vs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 282, :end-line 282, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vs]))}, RequiredKey {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/RequiredKey, :file "resources/public/js/dev/schema/core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 716, :record true, :end-line 716, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, cond-pre {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 557, :column 20, :end-line 557, :end-column 28, :arglists (quote ([& schemas])), :doc "A replacement for `either` that constructs a conditional schema\n   based on the schema spec preconditions of the component schemas.\n\n   Given a datum, the preconditions for each schema (which typically\n   check just the outermost class) are tested against the datum in turn.\n   The first schema whose precondition matches is greedily selected,\n   and the datum is validated against that schema.  Unlike `either`,\n   a validation failure is final (and there is no backtracking to try\n   other schemas that might match).\n\n   Thus, `cond-pre` is only suitable for schemas with mutually exclusive\n   preconditions (e.g., s/Int and s/Str).  If this doesn't hold\n   (e.g. {:a s/Int} and {:b s/Str}), you must use `conditional` instead\n   and provide an explicit condition for distinguishing the cases.\n\n   EXPERIMENTAL", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}}, :name schema.core/cond-pre, :variadic true, :file "resources/public/js/dev/schema/core.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}, :method-params [(schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 557, :end-line 557, :max-fixed-arity 0, :fn-var true, :arglists ([& schemas]), :doc "A replacement for `either` that constructs a conditional schema\n   based on the schema spec preconditions of the component schemas.\n\n   Given a datum, the preconditions for each schema (which typically\n   check just the outermost class) are tested against the datum in turn.\n   The first schema whose precondition matches is greedily selected,\n   and the datum is validated against that schema.  Unlike `either`,\n   a validation failure is final (and there is no backtracking to try\n   other schemas that might match).\n\n   Thus, `cond-pre` is only suitable for schemas with mutually exclusive\n   preconditions (e.g., s/Int and s/Str).  If this doesn't hold\n   (e.g. {:a s/Int} and {:b s/Str}), you must use `conditional` instead\n   and provide an explicit condition for distinguishing the cases.\n\n   EXPERIMENTAL"}, explain-kspec {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 779, :column 21, :end-line 779, :end-column 34, :private true, :arglists (quote ([kspec]))}, :private true, :name schema.core/explain-kspec, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 34, :method-params ([kspec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 779, :end-line 779, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kspec]))}, record* {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 1006, :column 20, :end-line 1006, :end-column 27, :arglists (quote ([klass schema map-constructor]))}, :name schema.core/record*, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 27, :method-params ([klass schema map-constructor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1006, :end-line 1006, :max-fixed-arity 3, :fn-var true, :arglists (quote ([klass schema map-constructor]))}, Inst {:name schema.core/Inst, :file "resources/public/js/dev/schema/core.cljs", :line 398, :column 1, :end-line 398, :end-column 10, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 398, :column 6, :end-line 398, :end-column 10}, :doc "The local representation of #inst ..."}, queue {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 886, :column 20, :end-line 886, :end-column 25, :arglists (quote ([x])), :doc "Defines a schema satisfied by instances of clojure.lang.PersistentQueue\n  (clj.core/PersistentQueue in ClojureScript) whose values satisfy x."}, :name schema.core/queue, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 25, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 886, :end-line 886, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Defines a schema satisfied by instances of clojure.lang.PersistentQueue\n  (clj.core/PersistentQueue in ClojureScript) whose values satisfy x."}, validator {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 149, :column 20, :end-line 149, :end-column 29, :arglists (quote ([schema])), :doc "Compile an efficient validator for schema."}, :name schema.core/validator, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 29, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Compile an efficient validator for schema."}, map->OptionalKey {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 729, :column 25, :end-line 729, :end-column 36, :internal-ctor true, :factory :map, :arglists (quote ([G__23985]))}, :name schema.core/map->OptionalKey, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 36, :method-params ([G__23985]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 729, :end-line 729, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23985]))}, FnSchema {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/FnSchema, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 1042, :record true, :end-line 1042, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, if {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 633, :column 20, :end-line 633, :end-column 22, :arglists (quote ([pred if-schema else-schema])), :doc "if the predicate returns truthy, use the if-schema, otherwise use the else-schema"}, :name schema.core/if, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 22, :method-params ([pred if-schema else-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 633, :end-line 633, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pred if-schema else-schema])), :doc "if the predicate returns truthy, use the if-schema, otherwise use the else-schema"}, Predicate {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Predicate, :file "resources/public/js/dev/schema/core.cljs", :end-column 34, :type true, :column 25, :internal-ctor true, :line 295, :record true, :end-line 295, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, make-fn-schema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 1057, :column 20, :end-line 1057, :end-column 34, :arglists (quote ([output-schema input-schemas])), :doc "A function outputting a value in output schema, whose argument vector must match one of\n   input-schemas, each of which should be a sequence schema.\n   Currently function schemas are purely descriptive; they validate against any function,\n   regardless of actual input and output types."}, :name schema.core/make-fn-schema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 34, :method-params ([output-schema input-schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1057, :end-line 1057, :max-fixed-arity 2, :fn-var true, :arglists (quote ([output-schema input-schemas])), :doc "A function outputting a value in output schema, whose argument vector must match one of\n   input-schemas, each of which should be a sequence schema.\n   Currently function schemas are purely descriptive; they validate against any function,\n   regardless of actual input and output types."}, as-queue {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 869, :column 20, :end-line 869, :end-column 28, :arglists (quote ([col]))}, :name schema.core/as-queue, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 28, :method-params ([col]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 869, :end-line 869, :max-fixed-arity 1, :fn-var true, :arglists (quote ([col]))}, Str {:name schema.core/Str, :file "resources/public/js/dev/schema/core.cljs", :line 364, :column 1, :end-line 364, :end-column 9, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 364, :column 6, :end-line 364, :end-column 9}, :doc "Satisfied only by String.\n   Is (pred string?) and not js/String in cljs because of keywords."}, map->EqSchema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 254, :column 25, :end-line 254, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__23753]))}, :name schema.core/map->EqSchema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :method-params ([G__23753]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23753]))}, ->AnythingSchema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 239, :column 25, :end-line 239, :end-column 39, :internal-ctor true, :factory :positional, :arglists (quote ([_]))}, :name schema.core/->AnythingSchema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 39, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 239, :end-line 239, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_]))}, maybe {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 422, :column 20, :end-line 422, :end-column 25, :arglists (quote ([schema])), :doc "A value that must either be nil or satisfy schema"}, :name schema.core/maybe, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 25, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 422, :end-line 422, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "A value that must either be nil or satisfy schema"}, check {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 140, :column 20, :end-line 140, :end-column 25, :arglists (quote ([schema x])), :doc "Return nil if x matches schema; otherwise, returns a value that looks like the\n   'bad' parts of x with ValidationErrors at the leaves describing the failures.\n\n   If you will be checking many datums, it is much more efficient to create\n   a 'checker' once and call it on each of them."}, :name schema.core/check, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 25, :method-params ([schema x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema x])), :doc "Return nil if x matches schema; otherwise, returns a value that looks like the\n   'bad' parts of x with ValidationErrors at the leaves describing the failures.\n\n   If you will be checking many datums, it is much more efficient to create\n   a 'checker' once and call it on each of them."}, pair {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 979, :column 20, :end-line 979, :end-column 24, :arglists (quote ([first-schema first-name second-schema second-name])), :doc "A schema for a pair of schemas and their names"}, :name schema.core/pair, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 24, :method-params ([first-schema first-name second-schema second-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 979, :end-line 979, :max-fixed-arity 4, :fn-var true, :arglists (quote ([first-schema first-name second-schema second-name])), :doc "A schema for a pair of schemas and their names"}, set-fn-validation! {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 1176, :column 20, :end-line 1176, :end-column 38, :arglists (quote ([on?])), :doc "Globally turn on (or off) schema validation for all s/fn and s/defn instances."}, :name schema.core/set-fn-validation!, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 38, :method-params ([on?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1176, :end-line 1176, :max-fixed-arity 1, :fn-var true, :arglists (quote ([on?])), :doc "Globally turn on (or off) schema validation for all s/fn and s/defn instances."}, EnumSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/EnumSchema, :file "resources/public/js/dev/schema/core.cljs", :end-column 35, :type true, :column 25, :internal-ctor true, :line 282, :record true, :end-line 282, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->OptionalKey {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 729, :column 25, :end-line 729, :end-column 36, :internal-ctor true, :factory :positional, :arglists (quote ([k]))}, :name schema.core/->OptionalKey, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 36, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 729, :end-line 729, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, map->Constrained {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 579, :column 25, :end-line 579, :end-column 36, :internal-ctor true, :factory :map, :arglists (quote ([G__23925]))}, :name schema.core/map->Constrained, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 36, :method-params ([G__23925]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 579, :end-line 579, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23925]))}, ->ConditionalSchema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 473, :column 25, :end-line 473, :end-column 42, :internal-ctor true, :factory :positional, :arglists (quote ([preds-and-schemas error-symbol]))}, :name schema.core/->ConditionalSchema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 42, :method-params ([preds-and-schemas error-symbol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 473, :end-line 473, :max-fixed-arity 2, :fn-var true, :arglists (quote ([preds-and-schemas error-symbol]))}, ->NamedSchema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 430, :column 25, :end-line 430, :end-column 36, :internal-ctor true, :factory :positional, :arglists (quote ([schema name]))}, :name schema.core/->NamedSchema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 36, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 430, :end-line 430, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name]))}, schematize-fn {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 1207, :column 20, :end-line 1207, :end-column 33, :arglists (quote ([f schema])), :doc "Attach the schema to fn f at runtime, extractable by fn-schema."}, :name schema.core/schematize-fn, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :method-params ([f schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1207, :end-line 1207, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f schema])), :doc "Attach the schema to fn f at runtime, extractable by fn-schema."}, Uuid {:name schema.core/Uuid, :file "resources/public/js/dev/schema/core.cljs", :line 402, :column 1, :end-line 402, :end-column 10, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 402, :column 6, :end-line 402, :end-column 10}, :doc "The local representation of #uuid ..."}, map->Isa {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 267, :column 25, :end-line 267, :end-column 28, :internal-ctor true, :factory :map, :arglists (quote ([G__23763]))}, :name schema.core/map->Isa, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 28, :method-params ([G__23763]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 267, :end-line 267, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23763]))}, map->Either {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 446, :column 25, :end-line 446, :end-column 31, :internal-ctor true, :factory :map, :arglists (quote ([G__23843]))}, :name schema.core/map->Either, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 31, :method-params ([G__23843]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 446, :end-line 446, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23843]))}, schema-ns {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 1099, :column 20, :end-line 1099, :end-column 29, :arglists (quote ([schema])), :doc "Returns the namespace of a schema attached via defschema."}, :name schema.core/schema-ns, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 29, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1099, :end-line 1099, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Returns the namespace of a schema attached via defschema."}, ->Record {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 992, :column 25, :end-line 992, :end-column 31, :internal-ctor true, :factory :positional, :arglists (quote ([klass schema]))}, :name schema.core/->Record, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 31, :method-params ([klass schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 992, :end-line 992, :max-fixed-arity 2, :fn-var true, :arglists (quote ([klass schema]))}, ->Recursive {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 647, :column 25, :end-line 647, :end-column 34, :internal-ctor true, :factory :positional, :arglists (quote ([derefable]))}, :name schema.core/->Recursive, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 34, :method-params ([derefable]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 647, :end-line 647, :max-fixed-arity 1, :fn-var true, :arglists (quote ([derefable]))}, protocol-name {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 317, :column 20, :end-line 317, :end-column 33, :arglists (quote ([protocol]))}, :name schema.core/protocol-name, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :method-params ([protocol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 317, :end-line 317, :max-fixed-arity 1, :fn-var true, :arglists (quote ([protocol]))}, constrained {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 590, :column 20, :end-line 590, :end-column 31, :arglists (quote ([s p?] [s p? pred-name])), :doc "A schema with an additional post-condition.  Differs from `conditional`\n   with a single schema, in that the predicate checked *after* the main\n   schema.  This can lead to better error messages, and is often better\n   suited for coercion.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s p?] [s p? pred-name]), :arglists ([s p?] [s p? pred-name]), :arglists-meta (nil nil)}}, :name schema.core/constrained, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 31, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s p?] [s p? pred-name]), :arglists ([s p?] [s p? pred-name]), :arglists-meta (nil nil)}, :method-params ([s p?] [s p? pred-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 590, :end-line 590, :max-fixed-arity 3, :fn-var true, :arglists ([s p?] [s p? pred-name]), :doc "A schema with an additional post-condition.  Differs from `conditional`\n   with a single schema, in that the predicate checked *after* the main\n   schema.  This can lead to better error messages, and is often better\n   suited for coercion."}, Isa {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Isa, :file "resources/public/js/dev/schema/core.cljs", :end-column 28, :type true, :column 25, :internal-ctor true, :line 267, :record true, :end-line 267, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->CondPre {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 544, :column 25, :end-line 544, :end-column 32, :internal-ctor true, :factory :map, :arglists (quote ([G__23907]))}, :name schema.core/map->CondPre, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 32, :method-params ([G__23907]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 544, :end-line 544, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23907]))}, queue? {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 863, :column 20, :end-line 863, :end-column 26, :arglists (quote ([x]))}, :name schema.core/queue?, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 863, :end-line 863, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, ->Either {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 446, :column 25, :end-line 446, :end-column 31, :internal-ctor true, :factory :positional, :arglists (quote ([schemas]))}, :name schema.core/->Either, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 31, :method-params ([schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 446, :end-line 446, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schemas]))}, map->NamedSchema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 430, :column 25, :end-line 430, :end-column 36, :internal-ctor true, :factory :map, :arglists (quote ([G__23834]))}, :name schema.core/map->NamedSchema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 36, :method-params ([G__23834]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 430, :end-line 430, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23834]))}, HasPrecondition {:meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 519, :column 14, :end-line 519, :end-column 29, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {precondition [[this]]}}}, :protocol-symbol true, :name schema.core/HasPrecondition, :file "resources/public/js/dev/schema/core.cljs", :end-column 29, :column 1, :line 519, :protocol-info {:methods {precondition [[this]]}}, :info nil, :end-line 519, :impls #{schema/spec.leaf.LeafSpec schema/spec.variant.VariantSpec schema.core/Both schema/spec.collection.CollectionSpec}, :doc nil, :jsdoc ("@interface")}, Queue {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Queue, :file "resources/public/js/dev/schema/core.cljs", :end-column 30, :type true, :column 25, :internal-ctor true, :line 876, :record true, :end-line 876, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, checker {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 132, :column 20, :end-line 132, :end-column 27, :arglists (quote ([schema])), :doc "Compile an efficient checker for schema, which returns nil for valid values and\n   error descriptions otherwise."}, :name schema.core/checker, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 27, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Compile an efficient checker for schema, which returns nil for valid values and\n   error descriptions otherwise."}, Keyword {:name schema.core/Keyword, :file "resources/public/js/dev/schema/core.cljs", :line 381, :column 1, :end-line 381, :end-column 13, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 381, :column 6, :end-line 381, :end-column 13}, :doc "A keyword"}, recursive {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 661, :column 20, :end-line 661, :end-column 29, :arglists (quote ([schema])), :doc "Support for (mutually) recursive schemas by passing a var that points to a schema,\n   e.g (recursive #'ExampleRecursiveSchema)."}, :name schema.core/recursive, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 29, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 661, :end-line 661, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Support for (mutually) recursive schemas by passing a var that points to a schema,\n   e.g (recursive #'ExampleRecursiveSchema)."}, spec {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 111, :column 4, :end-line 111, :end-column 8, :protocol schema.core/Schema, :doc "A spec is a record of some type that expresses the structure of this schema\n     in a declarative and/or imperative way.  See schema.spec.* for examples.", :arglists (quote ([this]))}, :protocol schema.core/Schema, :name schema.core/spec, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 8, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "A spec is a record of some type that expresses the structure of this schema\n     in a declarative and/or imperative way.  See schema.spec.* for examples."}, Recursive {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Recursive, :file "resources/public/js/dev/schema/core.cljs", :end-column 34, :type true, :column 25, :internal-ctor true, :line 647, :record true, :end-line 647, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->MapEntry {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 751, :column 25, :end-line 751, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([key-schema val-schema]))}, :name schema.core/->MapEntry, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :method-params ([key-schema val-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 751, :end-line 751, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key-schema val-schema]))}, ->Queue {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 876, :column 25, :end-line 876, :end-column 30, :internal-ctor true, :factory :positional, :arglists (quote ([schema]))}, :name schema.core/->Queue, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 30, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 876, :end-line 876, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema]))}, ->Protocol {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 322, :column 25, :end-line 322, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([p]))}, :name schema.core/->Protocol, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 322, :end-line 322, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, ->Maybe {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 413, :column 25, :end-line 413, :end-column 30, :internal-ctor true, :factory :positional, :arglists (quote ([schema]))}, :name schema.core/->Maybe, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 30, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 413, :end-line 413, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema]))}, explain-input-schema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 1036, :column 20, :end-line 1036, :end-column 40, :arglists (quote ([input-schema]))}, :name schema.core/explain-input-schema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 40, :method-params ([input-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1036, :end-line 1036, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-schema]))}, map-elements {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 788, :column 8, :end-line 788, :end-column 20, :private true, :arglists (quote ([this]))}, :private true, :name schema.core/map-elements, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 788, :end-line 788, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, optional-key? {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 736, :column 20, :end-line 736, :end-column 33, :arglists (quote ([ks]))}, :name schema.core/optional-key?, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 736, :end-line 736, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, Atomic {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Atomic, :file "resources/public/js/dev/schema/core.cljs", :end-column 31, :type true, :column 25, :internal-ctor true, :line 677, :record true, :end-line 677, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Both {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 603, :column 25, :end-line 603, :end-column 29, :internal-ctor true, :factory :map, :arglists (quote ([G__23941]))}, :name schema.core/map->Both, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 29, :method-params ([G__23941]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 603, :end-line 603, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23941]))}, required-key {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 718, :column 20, :end-line 718, :end-column 32, :arglists (quote ([k])), :doc "A required key in a map"}, :name schema.core/required-key, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 32, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 718, :end-line 718, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "A required key in a map"}, optional {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 908, :column 20, :end-line 908, :end-column 28, :arglists (quote ([schema name])), :doc "A single optional element of a sequence (not repeated, the implicit default)"}, :name schema.core/optional, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 28, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 908, :end-line 908, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "A single optional element of a sequence (not repeated, the implicit default)"}, Int {:name schema.core/Int, :file "resources/public/js/dev/schema/core.cljs", :line 377, :column 1, :end-line 377, :end-column 9, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 377, :column 6, :end-line 377, :end-column 9}, :doc "Any integral number"}, ->FnSchema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 1042, :column 25, :end-line 1042, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([output-schema input-schemas]))}, :name schema.core/->FnSchema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :method-params ([output-schema input-schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 1042, :end-line 1042, :max-fixed-arity 2, :fn-var true, :arglists (quote ([output-schema input-schemas]))}, Schema {:meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 110, :column 14, :end-line 110, :end-column 20, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {spec [[this]], explain [[this]]}}}, :protocol-symbol true, :name schema.core/Schema, :file "resources/public/js/dev/schema/core.cljs", :end-column 20, :column 1, :line 110, :protocol-info {:methods {spec [[this]], explain [[this]]}}, :info nil, :end-line 110, :impls #{schema.core/Isa cljs/core.PersistentHashMap js/RegExp schema.core/Queue schema.core/Recursive schema.core/Atomic schema.core/t_schema$core23820 cljs/core.PersistentArrayMap schema.core/NamedSchema cljs/core.PersistentVector schema.core/Either schema.core/Both cljs/core.PersistentHashSet schema.core/ConditionalSchema schema.core/Record schema.core/EqSchema schema.core/MapEntry function schema.core/Maybe schema.core/AnythingSchema schema.core/FnSchema schema.core/Predicate schema.core/EnumSchema schema.core/Protocol schema.core/CondPre schema.core/Constrained}, :doc nil, :jsdoc ("@interface")}, Both {:num-fields 1, :protocols #{cljs.core/IRecord schema.core/HasPrecondition cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted schema.spec.core/CoreSpec cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Both, :file "resources/public/js/dev/schema/core.cljs", :end-column 29, :type true, :column 25, :internal-ctor true, :line 603, :record true, :end-line 603, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Maybe {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 413, :column 25, :end-line 413, :end-column 30, :internal-ctor true, :factory :map, :arglists (quote ([G__23825]))}, :name schema.core/map->Maybe, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 30, :method-params ([G__23825]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 413, :end-line 413, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23825]))}, map-entry {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 769, :column 20, :end-line 769, :end-column 29, :arglists (quote ([key-schema val-schema]))}, :name schema.core/map-entry, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 29, :method-params ([key-schema val-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 769, :end-line 769, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key-schema val-schema]))}, specific-key? {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 746, :column 20, :end-line 746, :end-column 33, :arglists (quote ([ks]))}, :name schema.core/specific-key?, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 33, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 746, :end-line 746, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, var-name {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 643, :column 20, :end-line 643, :end-column 28, :arglists (quote ([v]))}, :name schema.core/var-name, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 28, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 643, :end-line 643, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, map->EnumSchema {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 282, :column 25, :end-line 282, :end-column 35, :internal-ctor true, :factory :map, :arglists (quote ([G__23780]))}, :name schema.core/map->EnumSchema, :variadic false, :file "resources/public/js/dev/schema/core.cljs", :end-column 35, :method-params ([G__23780]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 282, :end-line 282, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23780]))}, both {:protocol-inline nil, :meta {:file "/Users/sickill/code/asciinema/asciinema-player/resources/public/js/dev/schema/core.cljs", :line 622, :column 43, :end-line 622, :end-column 47, :deprecated "1.0.0", :arglists (quote ([& schemas])), :doc "A value that must satisfy every schema in schemas.\n\n   DEPRECATED: prefer 'conditional' with a single condition\n   instead, or `constrained`.\n\n   When used with coercion, coerces each schema in sequence.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}}, :name schema.core/both, :variadic true, :file "resources/public/js/dev/schema/core.cljs", :end-column 47, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}, :method-params [(schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 622, :deprecated "1.0.0", :end-line 622, :max-fixed-arity 0, :fn-var true, :arglists ([& schemas]), :doc "A value that must satisfy every schema in schemas.\n\n   DEPRECATED: prefer 'conditional' with a single condition\n   instead, or `constrained`.\n\n   When used with coercion, coerces each schema in sequence."}}, :require-macros {macros schema.macros, schema.macros schema.macros, schema.core schema.core, utils schema.utils, schema.utils schema.utils, spec schema.spec.core, schema.spec.core schema.spec.core}, :cljs.analyzer/constants {:seen #{matches-some-precondition? & named postcondition :schema optional-key present? satisfies? p? atom js/RegExp = :klass :v :schema.core/error p isa? atom? Symbol vs :post-name :parent conditional :else missing-required-key either Bool enum sequential? one :_ set? :ns schema :name :wrap-error :extra-validator-fn :output-schema some-matching-either-clause? :value klass :key-schema v map? :proto-sym some-matching-condition? has-extra-elts? :input-schemas string? post-name :type Num eq parent :derefable pred Any Regex protocol :val-schema cond-pre :schema.core/missing :preds-and-schemas Inst queue _ Str :k maybe name output-schema :optional? key-schema passes-extra-validation? input-schemas Uuid derefable :schemas instance? re-find meta23821 :h val-schema preds-and-schemas constrained :error-symbol queue? :constructor :pred-name k => Keyword recursive ifn? :error optional? var :postcondition schemas error-symbol =>* h :p? ... invalid-key record pred-name required-key optional :proto-pred Int :p :guard :vs map-entry both disallowed-key}, :order [:type :schema :value :error :schema.core/error instance? Str Bool Num Regex Inst Uuid :_ Any _ :v = eq v :h :parent isa? h parent :vs enum vs :p? :pred-name Int Keyword Symbol :else pred p? pred-name :proto-sym :p :proto-pred satisfies? protocol p string? re-find js/RegExp meta23821 :guard maybe schema :name :wrap-error named name :schemas some-matching-either-clause? either schemas :preds-and-schemas :error-symbol some-matching-condition? conditional preds-and-schemas error-symbol matches-some-precondition? cond-pre :postcondition :post-name constrained postcondition post-name both :ns :derefable var ... recursive derefable atom? atom :k k :key-schema :val-schema invalid-key map-entry key-schema val-schema required-key optional-key missing-required-key disallowed-key map? set? queue? queue :optional? optional? sequential? :schema.core/missing present? has-extra-elts? optional one :klass :extra-validator-fn passes-extra-validation? :constructor record klass & :output-schema :input-schemas ifn? =>* => output-schema input-schemas]}, :doc "A library for data shape definition and validation. A Schema is just Clojure data,\n   which can be used to document and validate Clojure functions and data.\n\n   For example,\n\n   (def FooBar {:foo Keyword :bar [Number]}) ;; a schema\n\n   (check FooBar {:foo :k :bar [1.0 2.0 3.0]})\n   ==> nil\n\n   representing successful validation, but the following all return helpful errors\n   describing how the provided data fails to measure up to schema FooBar's standards.\n\n   (check FooBar {:bar [1.0 2.0 3.0]})\n   ==> {:foo missing-required-key}\n\n   (check FooBar {:foo 1 :bar [1.0 2.0 3.0]})\n   ==> {:foo (not (keyword? 1))}\n\n   (check FooBar {:foo :k :bar [1.0 2.0 3.0] :baz 1})\n   ==> {:baz disallowed-key}\n\n   Schema lets you describe your leaf values using the Any, Keyword, Symbol, Number,\n   String, and Int definitions below, or (in Clojure) you can use arbitrary Java\n   classes or primitive casts to describe simple values.\n\n   From there, you can build up schemas for complex types using Clojure syntax\n   (map literals for maps, set literals for sets, vector literals for sequences,\n   with details described below), plus helpers below that provide optional values,\n   enumerations, arbitrary predicates, and more.\n\n   Assuming you (:require [schema.core :as s :include-macros true]),\n   Schema also provides macros for defining records with schematized elements\n   (s/defrecord), and named or anonymous functions (s/fn and s/defn) with\n   schematized inputs and return values.  In addition to producing better-documented\n   records and functions, these macros allow you to retrieve the schema associated\n   with the defined record or function.  Moreover, functions include optional\n   *validation*, which will throw an error if the inputs or outputs do not\n   match the provided schemas:\n\n   (s/defrecord FooBar\n    [foo :- Int\n     bar :- String])\n\n   (s/defn quux :- Int\n    [foobar :- Foobar\n     mogrifier :- Number]\n    (* mogrifier (+ (:foo foobar) (Long/parseLong (:bar foobar)))))\n\n   (quux (FooBar. 10 \"5\") 2)\n   ==> 30\n\n   (fn-schema quux)\n   ==> (=> Int (record user.FooBar {:foo Int, :bar java.lang.String}) java.lang.Number)\n\n   (s/with-fn-validation (quux (FooBar. 10.2 \"5\") 2))\n   ==> Input to quux does not match schema: [(named {:foo (not (integer? 10.2))} foobar) nil]\n\n   As you can see, the preferred syntax for providing type hints to schema's defrecord,\n   fn, and defn macros is to follow each element, argument, or function name with a\n   :- schema.  Symbols without schemas default to a schema of Any.  In Clojure,\n   class (e.g., clojure.lang.String) and primitive schemas (long, double) are also\n   propagated to tag metadata to ensure you get the type hinting and primitive\n   behavior you ask for.\n\n   If you don't like this style, standard Clojure-style typehints are also supported:\n\n   (fn-schema (s/fn [^String x]))\n   ==> (=> Any java.lang.String)\n\n   You can directly type hint a symbol as a class, primitive, or simple\n   schema.\n\n   See the docstrings of defrecord, fn, and defn for more details about how\n   to use these macros."}